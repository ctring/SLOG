syntax = "proto3";
package slog;

import "proto/machine_id.proto";

enum TransactionType {
    UNKNOWN = 0;
    SINGLE_HOME = 1;
    MULTI_HOME = 2;
    LOCK_ONLY = 3;
}

enum TransactionStatus {
    NOT_STARTED = 0;
    COMMITTED = 1;
    ABORTED = 2;
}

message MasterMetadata {
    uint32 master = 1;
    uint32 counter = 2;
}

enum TransactionEvent {
    ENTER_SERVER = 0;
    EXIT_SERVER_TO_FORWARDER = 1;
    ENTER_FORWARDER = 2;
    EXIT_FORWARDER_TO_SEQUENCER = 3;
    EXIT_FORWARDER_TO_MULTI_HOME_ORDERER = 4;
    ENTER_MULTI_HOME_ORDERER = 5;
    ENTER_MULTI_HOME_ORDERER_IN_BATCH = 6;
    EXIT_MULTI_HOME_ORDERER_IN_BATCH = 7;
    ENTER_SEQUENCER = 8;
    ENTER_SEQUENCER_IN_BATCH = 9;
    EXIT_SEQUENCER_IN_BATCH = 10;
    ENTER_SCHEDULER_IN_BATCH = 11;
    EXIT_GLOBAL_LOG = 12;
    ACCEPTED = 13;
    DISPATCHED = 14;
    ENTER_WORKER = 15;
    EXIT_WORKER = 16;
    RELEASE_LOCKS = 17;
    EXIT_SCHEDULER = 18;
    RETURN_TO_SERVER = 19;
    EXIT_SERVER_TO_CLIENT = 20;
}

message TransactionInternal {
    // unique transaction id, multi-home and lock only
    // txns share this id
    uint32 id = 1;
    map<string, MasterMetadata> master_metadata = 2;
    TransactionType type = 3;
    internal.MachineId coordinating_server = 4;

    // for recording time of different events of txn
    repeated TransactionEvent events = 5;
    repeated uint64 event_times = 6;    // when the events took place
    repeated uint32 event_machines = 7; // where the events took place
}

message Transaction {
    TransactionInternal internal = 1;

    string code = 2;
    map<string, string> read_set = 3;
    map<string, string> write_set = 4;

    TransactionStatus status = 5;
    string abort_reason = 6;
    repeated string delete_set = 7;
}