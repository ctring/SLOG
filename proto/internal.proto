syntax = "proto3";

import "proto/machine_id.proto";
import "proto/transaction.proto";

package slog.internal;

message Batch {
    uint32 id = 1;
    repeated Transaction transactions = 2;
    // All txns in this batch has this same type.
    // Can either be SINGLE_HOME or MULTI_HOME. 
    // LOCK_ONLY txns are also considered SINGLE_HOME.
    TransactionType transaction_type = 3;
    // For recording the event time for all
    // transactions in this batch simultaneously
    repeated TransactionEvent events = 4;
    repeated uint64 event_times = 5;    // when the events took place
    repeated uint32 event_machines = 6; // where the events took place
}

message BatchOrder {
    uint32 batch_id = 1;
    uint32 slot = 2;
}

/***********************************************
                    REQUESTS
***********************************************/
/**
 * The first message of a communication between two entities is
 * always a Request. Some types of Request needs a Response
 * (e.g. LookUpMasterRequest); these requests end with "Request".
 * Some others are one-way requests (e.g. PaxosPropose) and do not 
 * end with "Request".
 */
message Request {
    oneof type {
        EchoRequest echo = 1;
        BrokerReady broker_ready = 2;
        ForwardTransaction forward_txn = 3;
        LookupMasterRequest lookup_master = 4;
        ForwardBatch forward_batch = 5;
        PaxosPropose paxos_propose = 6;
        PaxosAcceptRequest paxos_accept = 8;
        PaxosCommitRequest paxos_commit = 9;
        LocalQueueOrder local_queue_order = 10;
        WorkerRequest worker = 11;
        RemoteReadResult remote_read_result = 12;
        CompletedSubtransaction completed_subtxn = 13;
        StatsRequest stats = 14;
    }
}

/**
 * For debugging and testing purposes
 */
message EchoRequest {
    bytes data = 1;
}

/**
 * Used by the Broker to notify others its presence. Some
 * identifiers are included so that the receivers can build a
 * map of the whole network.
 */
message BrokerReady {
    bytes ip_address = 1;
    MachineId machine_id = 2;
}

message ForwardTransaction {
    Transaction txn = 1;
}

message LookupMasterRequest {
    uint32 txn_id = 1;
    repeated string keys = 2;
}

message ForwardBatch {
    oneof part {
        Batch batch_data = 1;
        BatchOrder batch_order = 2;
    }
    // Batches generated by the same machine need to follow the
    // order of creation. This field is used to number the batches
    // following that order. It always start from 0 and increment by 1
    uint32 same_origin_position = 3;
}

message PaxosPropose {
    uint32 value = 1;
}

message PaxosAcceptRequest {
    uint32 ballot = 1;
    uint32 slot = 2;
    uint32 value = 3;
}

message PaxosCommitRequest {
    uint32 ballot = 1;
    uint32 slot = 2;
    uint32 value = 3;
}

message LocalQueueOrder {
    // queue_id is the partition that the 
    // batch queue is generated from
    uint32 queue_id = 1;
    uint32 slot = 2;
}

message WorkerRequest {
    uint64 txn_holder_ptr = 1;
}

message RemoteReadResult {
    uint32 txn_id = 1;
    uint32 partition = 2;
    map<string, string> reads = 3;
}

message CompletedSubtransaction {
    Transaction txn = 1;
    uint32 partition = 2;
    repeated uint32 involved_partitions = 3;
}

message StatsRequest {
    uint32 id = 1;
    uint32 level = 2;
}

/***********************************************
                    RESPONSES
***********************************************/
/**
 * A response is always preceeded by a Request
 */
message Response {
    oneof type {
        EchoResponse echo = 1;
        LookupMasterResponse lookup_master = 2;
        PaxosAcceptResponse paxos_accept = 3;
        PaxosCommitResponse paxos_commit = 4;
        WorkerResponse worker = 5;
        StatsResponse stats = 6;
    }
}

/**
 * For debugging and testing purposes
 */
message EchoResponse {
    bytes data = 1;
}

message LookupMasterResponse {
    uint32 txn_id = 1;
    map<string, MasterMetadata> master_metadata = 2;
    // Keys belonging to the responding partition
    // but without mastership info (because the key is new)
    repeated string new_keys = 3;
}

message PaxosAcceptResponse {
    uint32 ballot = 1;
    uint32 slot = 2;
}

message PaxosCommitResponse {
    uint32 slot = 1;
}

message WorkerResponse {
    bool has_txn_id = 1;
    uint32 txn_id = 2;
    repeated uint32 participants = 3;
}

message StatsResponse {
    uint32 id = 1;
    bytes stats_json = 2;
}