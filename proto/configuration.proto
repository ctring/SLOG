syntax = "proto3";

package slog.internal;

message Replica {
    // List of all machine addresses in the system.
    // This list must have the size equal to number of partitions
    // If protocol is "tcp", these are IP addresses.
    // If protocol is "icp", these are filesystem paths.
    repeated bytes addresses = 1;
}

message ReplicationDelayExperiment {
    // Percent of batches that are delayed
    uint32 batch_delay_percent = 1;
    // Average duration of delay in ticks (module/Ticker)
    uint32 batch_delay_amount = 2;
}

/**
 * With hash partitioning, each key is interpreted as a byte string.
 * The keys are distributed to the partitions based on their
 * hash values.
 * Initial data can be loaded from an external file.
 */
message HashPartitioning {
    // Number of prefix bytes of a key to use for partitioning
    uint32 partition_key_num_bytes = 1;
}

/**
 * With range partitioning, each key is assumed to be a number.
 * The keys are distributed to the partitions based on key values
 * modulo the number of partitions. 
 * Initial data cannot be loaded from an external file but can be
 * generated at startup. The following is an example of home and partition
 * assignment of the generated data with 3 partitions and 4 regions.
 *
 *        home | 0  1  2  3  0  1  2  3  0  ...
 * ------------|-------------------------------
 * partition 0 | 0  3  6  9  12 15 18 21 24 ...
 * partition 1 | 1  4  7  10 13 16 19 22 25 ...
 * partition 2 | 2  5  8  11 14 17 20 23 26 ...
 * ------------|-------------------------------
 *             |            keys            
 */
message RangePartitioning {
    // Number of records to generate
    uint64 num_records = 1;
    // Size of a generated record in bytes
    uint32 record_size_bytes = 2;
}

/**
 * The schema of a configuration file.
 */
message Configuration {
    // Protocol for the zmq sockets in the broker. Use "tcp" for
    // normal running and "icp" for unit and integration tests
    bytes protocol = 1;
    // Replica groups. Each group has a list of machine addresses
    // with the size equal to number of partitions
    repeated Replica replicas = 2;
    // Port for the zmq sockets in the broker. This is ignored if
    // the icp protocol is used
    uint32 broker_port = 3;
    // Port for the server
    uint32 server_port = 4;
    // Number of partitions per replica
    uint32 num_partitions = 5;
    // Partitioning scheme
    oneof partitioning {
        HashPartitioning hash_partitioning = 6;
        RangePartitioning range_partitioning = 7;
    }
    // Number of worker threads for processing the transactions
    uint32 num_workers = 8;
    // How long the sequencer wait for batching
    uint64 batch_duration = 9;
    // Config for CMake option ENABLE_REPLICATION_DELAY. Replication
    // of txn batches will be delayed to simulate uneven network latency
    ReplicationDelayExperiment replication_delay = 10;
}